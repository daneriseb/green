@use '../../tokens';
@use '../../common';
@use 'sass:map';
@use 'sass:math';

/* Tokens todo: move/refactor */
$background: tokens.$white;
$background-hover: tokens.$white;
$background-active: map-get(tokens.$blue, 1);
$checkbox-size: 1.25rem;
$sm-size-division-amount: 1.55;
$checkmark-color: tokens.$white;

/* Style for label */
.form-control {
  @include common.padding-vertical(4);
  @include common.padding-end(4);
  @include common.add-hover-state(map-get(tokens.$blue, 2), 'input[type=checkbox]:not(.disabled,:disabled) ~ span');
  align-items: center;
  cursor: pointer;
  display: flex;
  flex-direction: row-reverse;
  font: inherit;
  justify-content: flex-end;
  max-width: fit-content;
  position: relative;
  user-select: none;
  white-space: nowrap;
}

/* Hide the browser's default checkbox */
.form-control input[type=checkbox] {
  @include common.add-focus('visible', '~ span');
  cursor: pointer;
  height: 0;
  opacity: 0;
  position: absolute;
  width: 0;
  z-index: -1;
}

/* Style for custom checkbox */
.form-control input[type=checkbox] ~ span {
  @include common.add-border();
  @include common.add-border-color();
  @include common.margin-end(4);
  background-color: $background;
  flex: 0 0 auto;
  height: $checkbox-size;
  transition: 300ms;
  width: $checkbox-size;
}

/* Small custom checkbox */
.form-control input[type=checkbox].size-sm ~ span {
  @include common.margin-end(2);
  height: math.div($checkbox-size, $sm-size-division-amount);
  width: math.div($checkbox-size, $sm-size-division-amount);
}

/* Large custom checkbox */
.form-control input[type=checkbox].size-lg ~ span {
  @include common.margin-end(6);
  height: $checkbox-size * 2;
  width: $checkbox-size * 2;
}

/* Hover state */
.form-control:hover input[type=checkbox] ~ span {
  background-color: $background-hover;
}

/* Checked state */
.form-control input[type=checkbox]:checked ~ span {
  @include common.add-border-color($background-active);
  background-color: $background-active;
}

/* Valid state */
.was-validated .form-control input[type=checkbox]:not(.is-invalid):valid,
.form-control input[type=checkbox].is-valid {
  ~ span {
    @include common.add-border-color(map.get(tokens.$intent-colors, 'success'));
  }

  &:checked ~ span {
    background-color: map.get(tokens.$intent-colors, 'success');
  }
}

/* Invalid state */
.was-validated .form-control input[type=checkbox]:not(.is-valid):invalid,
.form-control input[type=checkbox].is-invalid {
  ~ span {
    @include common.add-border-color(map.get(tokens.$intent-colors, 'danger'));
  }

  &:checked ~ span {
    background-color: map.get(tokens.$intent-colors, 'danger');
  }
}

/* Disabled state */
.form-control input[type=checkbox]:disabled,
.form-control input[type=checkbox].disabled {
  ~ span {
    @include common.add-disable(false, false, true);
  }

  &:checked ~ span {
    @include common.add-disable(true, false, true);
  }
}

/* Un-checked checkbox (Setup initial styles) */
.form-control input[type=checkbox] ~ span::after,
.form-control input[type=checkbox] ~ span::before {
  background: $checkmark-color;
  content: '';
  opacity: 0;
  position: absolute;
  width: 3px;
}

/* Un-checked checkbox - Small variation */
.form-control input[type=checkbox].size-sm ~ span::after,
.form-control input[type=checkbox].size-sm ~ span::before {
  width: math.div(3px, $sm-size-division-amount);
}

/* Un-checked checkbox - Large variation */
.form-control input[type=checkbox].size-lg ~ span::after,
.form-control input[type=checkbox].size-lg ~ span::before {
  width: 3px * 2;
}

/* Un-checked checkbox ::after */
.form-control input[type=checkbox] ~ span::after {
  transform: rotate3d(0, 0, 1, 45deg) translate3d(4.5px, -2.5px, 0) scaleY(0);
  transform-origin: bottom right;
  transition: 100ms 0s ease-out;
}

/* Un-checked checkbox ::after - Small variation */
.form-control input[type=checkbox].size-sm ~ span::after {
  transform: rotate3d(0, 0, 1, 45deg) translate3d(2.25px, -1.25px, 0) scaleY(1);
}

/* Un-checked checkbox ::after - Large variation */
.form-control input[type=checkbox].size-lg ~ span::after {
  transform: rotate3d(0, 0, 1, 45deg) translate3d(4.5px, -2.5px, 0) scaleY(1);
}

/* Un-checked checkbox ::before */
.form-control input[type=checkbox] ~ span::before {
  height: 9px;
  transform: rotate3d(0, 0, 1, 135deg) translate3d(-4px, -0.5px, 0) scaleY(0);
  transform-origin: bottom left;
  transition: 100ms 100ms ease-in;
}

/* Un-checked checkbox ::before - Small variation */
.form-control input[type=checkbox].size-sm ~ span::before {
  transform: rotate3d(0, 0, 1, 135deg) translate3d(-4px, -0.5px, 0) scaleY(-1);
}

/* Un-checked checkbox ::before - Small variation */
.form-control input[type=checkbox].size-lg ~ span::before {
  transform: rotate3d(0, 0, 1, 135deg) translate3d(-4px, -0.5px, 0) scaleY(1);
}

/* Checked checkbox (Show the checkmark when checked) */
.form-control input[type=checkbox]:checked ~ span::before,
.form-control input[type=checkbox]:checked ~ span::after {
  opacity: 1;
  transition-timing-function: ease-in-out;
}

/* Checked checkbox ::after */
.form-control input[type=checkbox]:checked ~ span::after {
  height: 13px;
  transform: rotate3d(0, 0, 1, 45deg) translate3d(4.5px, -2.5px, 0) scaleY(1);
  transition-delay: 100ms;
}

/* Checked checkbox ::after - Small variation */
.form-control input[type=checkbox].size-sm:checked ~ span::after {
  height: math.div(13px, $sm-size-division-amount);
  transform: rotate3d(0, 0, 1, 45deg) translate3d(2px, -2px, 0)  scaleY(1);
}

/* Checked checkbox ::after - Large variation */
.form-control input[type=checkbox].size-lg:checked ~ span::after {
  height: 13px * 2;
  transform: rotate3d(0, 0, 1, 45deg) translate3d(9px, -5px, 0) scaleY(1);
}

/* Checked checkbox ::before */
.form-control input[type=checkbox]:checked ~ span::before {
  transform: rotate3d(0, 0, 1, 135deg) translate3d(-4px, -0.5px, 0) scaleY(1);
  transition-delay: 0s;
}

/* Checked checkbox ::before - Small variation */
.form-control input[type=checkbox].size-sm:checked ~ span::before {
  height: math.div(9px, $sm-size-division-amount);
  transform: rotate3d(0, 0, 1, 135deg) translate3d(-2.5px, 0.5px, 0)  scaleY(1);
}

/* Checked checkbox ::before - Large variation */
.form-control input[type=checkbox].size-lg:checked ~ span::before {
  height: 9px * 2;
  transform: rotate3d(0, 0, 1, 135deg) translate3d(-8px, -1px, 0) scaleY(1);
}
